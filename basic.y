%{
#include <iostream>

extern int yylex(); // A function that is to be generated and provided by flex,
             // which returns a next token when called repeatedly.
void yyerror(const char *s); 

extern int yyparse(); 
extern FILE *yyin; 
%}

%union {
    /* int val; */
    char var_dig;
    char* string; 
    /* You may include additional fields as you want. */
    /* char op; */
};

%start program

%token LPAREN RPAREN
%token COMMA CR PRINT IF THEN GOTO INPUT LET GOSUB RETURN CLEAR LIST RUN END PLUMIN RELOP MULDIV EQUAL
%token <var_dig> VAR
%token <var_dig> DIGIT
%token <string> STRING

%%

program : lines		{ printf("Successfully completed the program.\n");}
	;


lines : line
	 | line lines
	 ;

line : number statement CR
	 | statement CR
	 ;

statement : PRINT expr_list
	 | IF expression EQUAL expression THEN statement
	 | IF expression RELOP expression THEN statement
	 | GOTO expression
	 | INPUT var_list
	 | LET VAR EQUAL expression
	 | GOSUB expression
	 | RETURN
	 | CLEAR
	 | LIST
	 | RUN
	 | END
	 ; 

expr_list: STRING
	 | expression
	 | STRING COMMA expr_list
	 | expression COMMA expr_list
	 ; 

var_list: VAR
	 | VAR COMMA var_list
	 ;

expression: PLUMIN term
	 | PLUMIN term expression
	 ; 

term : factor
	 | factor MULDIV term
	 ; 

factor : VAR
	 | number
	 | LPAREN expression RPAREN
	 ; 

number : DIGIT
	 | DIGIT number
	 ; 

%%

int main()
{

	FILE *myfile = fopen("input.basic", "r");

	if(!myfile){
		printf("Cannot open the file. \n");
		return -1; 
	} 

	yyin = myfile; 

    yyparse(); // A parsing function that will be generated by Bison.

    return 0;
}

void yyerror(const char *s){
	printf("parse error!\n"); 
	exit(-1); 
}
